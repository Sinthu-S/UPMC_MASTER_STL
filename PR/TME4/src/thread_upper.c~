#define _XOPEN_SOURCE 700
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <pthread.h>

int upper(char *path)
{
    FILE* fp1, *fp2;
    int c = 1;

    fp1= fopen (path, "r");
    fp2= fopen (path, "r+");
    if ((fp1== NULL) || (fp2== NULL)) {
        perror ("fopen");
	return errno;
    }

    while (c !=EOF) {
        c=fgetc(fp1);
        if (c!=EOF)
        fputc(toupper(c),fp2);
    }

    fclose (fp1);
    fclose (fp2);

    return EXIT_SUCCESS;
}

void* funcThread(void* arg){
  unsigned int tid=(unsigned int)pthread_self();
  printf("Debut tid %u %s \n", tid, *(char**)arg);
  upper(*(char**)arg);
  printf("Fin tid %u \n",tid);  
}


int main(int argc, char** argv){

  int nbFichier = argc-1;
  pthread_t tid[nbFichier];
  int i=nbFichier-1;
  
  printf("nb argument %d %d\n  ",argc, i);
  while(i>-1){
      printf("%d\n  ", i);
    if(pthread_create(&tid[i], NULL, funcThread, (void*)&argv[i+1]) != 0){
      perror("erreur creation thread");
     
    }
    i--;
  }
  i++;
   printf("%d\n  ", i);
  
  while(i<nbFichier){
    if(pthread_join(tid[i],NULL) != 0){
       perror("erreur attente thread");
  
    }
    i++;
  }
 
  return 0;
}
