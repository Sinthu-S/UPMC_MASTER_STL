#define SVID_SOURCE 1
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <time.h>

struct msqid_ds buf;

struct message_pere{
 long id;
 char* val;
}msgPere;

struct message_fils{
 long id;
 char* contenu;
}msgFils;


int main(int argc, char** argv){

 key_t cle;
 int msg_id, msgFils_id;
 int nbProc;
 int i, j;
 int sum=0;
 pid_t pid;


 printf("\n\n Debut de programme \n\n");
 if(argc < 2){
     perror("manque argument");
   exit(1);
 }

 nbProc=atoi(argv[1]);
 i=nbProc;

 cle = ftok(argv[0], (char)getpid());
 if(( msg_id = msgget(cle, 0666 | IPC_CREAT))==-1){
   perror("erreur recup id file de message");
   exit(0);
 }




 do{
   nbProc--;
   pid=fork();
 }while(nbProc > 0 && pid != 0);

 if(pid == 0){

   cle = ftok(argv[0], (char)getpid());
   if(( msg_id = msgget(cle, 0666 | IPC_CREAT))==-1){
     perror("erreur recup id file de message");
     exit(0);
   }

   srand(getpid());
   msg.val=(int) (10*(float)rand()/ RAND_MAX);
   msg.id=1;

   if(msgsnd(msg_id , &msgPere, sizeof(int), 1,0) == -1){
     perror("erreur lecture msg");
     exit(0);
   }
     
   if(msgrcv(msgFils_id, &msgFils, sizeof(int), 0) == -1){
     perror("erreur envoie msg");
     exit(0);
   }

   printf("----->Valeur generer %d pid %d\n", msg.val,getpid());
   return -1;
 }else{
 
   while(i>0){
     if(msgrcv(msg_id , &msgPere, sizeof(int), 1,0) == -1){
       perror("erreur lecture msg");
       exit(0);
     }
     //boucle + recup msgFilsid
     if(msgsnd(msgFils_id, &msgFils, sizeof(int), 0) == -1){
       perror("erreur envoie msg");
       exit(0);
   }
   }
 }


 if(remonte_pic(atoi(argv[1]))>-1)
   msgctl(msg_id, IPC_RMID,NULL);
 return 0;
}
