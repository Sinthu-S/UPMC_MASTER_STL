#define SVID_SOURCE 1
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>

int shm_id;



int remonte_pic(int n){
int nbProc=n;
int sum=0;
int val;
int idFils=-1;
pid_t pid;
int *valAddr;

valAddr = shmat(shm_id, 0, 0600);

do{
  idFils++;
  nbProc--;
  pid=fork();
}while(nbProc > 0 && pid != 0);

if(pid == 0){

  srand(getpid());
  val=(int) (10*(float)rand()/ RAND_MAX);

  *(valAddr + idFils) = val;

  printf("----->Valeur generer %d pid %d\n", val, getpid());
  return -1;
}else{

  while(nbProc<n){
    wait(NULL);
    nbProc++;
  }
   printf("\nLecture des messages\n\n");
  while(idFils>-1){
   
    val = *(valAddr + idFils);
    sum += val;
    printf("----->Valeur lu  :  %d pid %d\n", val, getpid());
    idFils--;
  }
   printf("\n\nSomme : %d \n\n", sum);
  return 1;
}
}


int main(int argc, char** argv){

int shm;
int nb;

printf("\n\n Debut de programme \n\n");
if(argc < 2){
    perror("manque argument");
  exit(1);
}
nb=atoi(argv[1]);
cle = ftok(argv[0], (char)getpid());
if(( shm= shm_open(arg[0], O_RDWR | O_CREAT, 0600))==-1){
  perror("erreur creation shm");
  exit(0);
}



if(remonte_pic(nb)>-1)
  shmctl(shm_id, IPC_RMID,NULL);
return 0;
}
